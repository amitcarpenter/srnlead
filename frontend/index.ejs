<%- include('header.ejs') %>

    <head>

        <!-- DataTables CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
        <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">

        <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css">




    </head>



    <style>
        div#dropdown-content {
            width: 182px;
            background: #b2b2b2;
        }

        /* span#delete-btn {
            position: absolute;
            right: -258px;
            top: -19px;
            background: #8a8491;
        }

        button#export-csv-btn {
            position: absolute;
            right: -101px;
            top: -19px;
            background: #9c98a1;
        } */

        #TotalEmaildata_length {
            display: none;
        }

        #TodayEmailsData_length {
            display: none;
        }

        #weeklyEmailsData_length {
            display: none;
        }

        #MonthlyEmailsData_length {
            display: none;
        }

        /* Add some basic styling to the dropdown */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        .category-dropdown {
            position: relative;
            display: inline-block;
        }

        #category-input {
            padding: 10px;
            border: 1px solid #ccc;
            cursor: pointer;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background-color: #f1f1f1;
            min-width: 160px;
            border: 1px solid #ddd;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;
        }

        /* Style checkboxes */
        input[type="checkbox"] {
            float: right;
            margin-right: 5px;
            color: black;
        }

        /* Style category labels */
        .label-container {
            display: flex;
            align-items: center;
        }

        /* Show checkboxes when input is clicked */
        .show {
            display: block;
        }

        .categoy-fi {
            display: block;

        }

        .category-item {
            margin: 7px;
            color: black !important;
        }

        .amitcategory div {
            margin-left: 14rem;
            display: inline-block;

        }

        .amitaddlead {
            /* background-color: rgb(101, 101, 101); */
            margin-top: 0;
            display: flex;
            /* justify-content: center; */
            align-items: center;
            padding-bottom: 10px;
        }

        .table-mtset {
            margin-top: -19px;
        }

        .myd:hover {
            background-color: #ff5e5e;
        }
    </style>





    <div class="content-body">

        <div class="container-fluid mt-3">
            <div class="row">


                <!-- Total Emails Card -->
                <div class="col-lg-3 col-sm-6" id="totalEmailsCard">
                    <div class="card gradient-1" style="cursor: pointer;">
                        <div class="card-body">
                            <h3 class="card-title text-white">Total Emails</h3>
                            <div class="d-inline-block">
                                <h2 class="text-white">
                                    <%= totalEmails %>
                                </h2>

                            </div>
                            <span class="float-right display-5 opacity-5"><i class="fa fa-envelope"></i>
                            </span>
                        </div>
                    </div>
                </div>
                <!--End Total Emails Card -->


                <!-- Today Emails Card -->
                <div class="col-lg-3 col-sm-6" id="todayEmailsCard">
                    <div class="card gradient-2" style="cursor: pointer;">
                        <div class="card-body">
                            <h3 class="card-title text-white">Today Emails</h3>
                            <div class="d-inline-block">
                                <h2 class="text-white" id="totalEmailsCount">
                                    <%= todayEmails %>
                                </h2>
                                <p class="text-white mb-0" id="datePlaceholder"></p>

                            </div>
                            <span class="float-right display-5 opacity-5"><i class="fa fa-calendar"></i>

                            </span>
                        </div>
                    </div>
                </div>
                <!--End Today Emails Card -->


                <!-- Weekly Emails Card -->
                <div class="col-lg-3 col-sm-6" id="weeklyEmailsCard">
                    <div class="card gradient-3" style="cursor: pointer;">
                        <div class="card-body">
                            <h3 class="card-title text-white">Weakly Emails</h3>
                            <div class="d-inline-block">
                                <h2 class="text-white">
                                    <%=weeklyEmails%>
                                </h2>
                                <p class="text-white mb-0" id="weekdatashow"></p>

                            </div>
                            <span class="float-right display-5 opacity-5"><i class="fa fa-envelope"></i></span>
                        </div>
                    </div>
                </div>
                <!--End Weekly Emails Card -->


                <!-- Montly Emails Card -->
                <div class="col-lg-3 col-sm-6" id="monthlyEmailsCard">
                    <div class="card gradient-4" style="cursor: pointer;">
                        <div class="card-body">
                            <h3 class="card-title text-white">Monthly Emails</h3>
                            <div class="d-inline-block">
                                <h2 class="text-white">
                                    <%=MonthlyEmails%>
                                </h2>
                                <p class="text-white mb-0" id="currentmonth"></p>
                            </div>
                            <span class="float-right display-5 opacity-5"><i class="fa fa-calendar"></i></span>
                        </div>
                    </div>
                </div>
                <!--End Montly Emails Card -->

            </div>



            <div class="row mb-3">

                <!-- Date Filter  -->
                <div class="col-lg-3 col-sm-6">
                    <div class="form-group">
                        <label for="dateRange">Date Filter:</label>
                        <input type="text" class="form-control" name="daterange" id="daterange"
                            placeholder="YYYY-MM-DD to YYYY-MM-DD">
                    </div>
                    <button class="btn btn-primary" id="filter-btn">Apply Filter</button>
                </div>
                <!-- End Date Filter -->



                <!-- Day filter -->
                <div class="col-lg-3 col-sm-6">
                    <div class="form-group">
                        <label for="dateRange">Day Filter:</label>
                        <input type="date" class="form-control" id="selected-date">

                    </div>

                    <button class="btn btn-primary" id="apply-date-filter-btn">Apply Filter</button>
                </div>
                <!-- End Day Filter -->



                <!-- Category Filter -->
                <div class="col-lg-3 col-sm-6">
                    <div class="form-group">

                        <label for="dateRange" class="categoy-fi">Category Filter:</label>
                        <div class="dropdown">
                            <div class="category-dropdown">
                                <input type="text" id="category-input" placeholder="Select Categories">
                                <div id="dropdown-content" class="dropdown-content">
                                </div>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="selected-categories" class="amitcategory"></input>

                    <button class="btn btn-primary" id="findbyCategory">Apply Filter</button>
                </div>
                <!-- End Category Filter -->

                <!-- <div class="col-lg-3 col-sm-6 ">
                </div> -->



                <!-- Add And Delete Category -->
                <div class="col-lg-3 col-sm-6 ">
                    <label for="dateRange" class="categoy-fi">Add & Delete Category:</label>
                    <div>
                        <button class="btn btn-info mb-2 " id="addCategoryBtn" data-toggle="modal"
                            data-target="#basicModal" style="width: 154px;">
                            Add Category&nbsp;<i class="fas fa-plus"></i>
                        </button>
                    </div>


                    <div>
                        <button class="btn btn-danger" id="deleteCategoryBtn" onclick="deleteSelectedItem()"
                            data-toggle="modal" data-target="#DeleteModle">
                            Delete Category&nbsp;<i class="fas fa-trash"></i>
                        </button>
                    </div>

                </div>
                <!-- end add and delete category -->
            </div>












            <div class="row mt-0">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="active-member">
                                <div class="table-responsive table-mtset">

                                    <!-- Row for Add lead adn delete button -->
                                    <div class="col-lg-12">
                                        <div class="row amitaddlead">
                                            <div class="col-lg-1">
                                                <button type="button" data-bs-toggle="modal"
                                                    data-bs-target="#addLeadModal" class="btn btn-light addData"
                                                    id="addLeadButton">
                                                    Add Lead&nbsp;<i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                            <div class="col-lg-4 ml-5">
                                                <span class="rowCount p-2 mr-2">Selected Rows: <span
                                                        id="selectedCount">0</span></span>
                                                <button id="select-all-btn" class="btn btn-light ">Select All</button>

                                            </div>
                                            <div class="col-lg-2">
                                                <span id="delete-btn" class="btn btn-light myd"><i
                                                        class="fas fa-trash"></i></span>

                                            </div>
                                            <div class="col-lg-3 ml-5">
                                                <button id="export-csv-btn" class="btn btn-light marginle"> Export to
                                                    CSV &nbsp; <i class="fas fa-file-csv"></i></button>

                                            </div>
                                        </div>
                                    </div>

                                    <!-- addLeadModal -->
                                    <div class="modal fade" id="addLeadModal" tabindex="-1"
                                        aria-labelledby="addLeadModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <form method="post" id="addLeadForm">

                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="addLeadModald">Add Data</h1>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                            aria-label="Close"></button>
                                                    </div>

                                                    <div class="modal-body">

                                                        <div class="form-group mt-2">
                                                            <label for="name">Name</label>
                                                            <input type="text" class="form-control" id="name"
                                                                name="DomainName" aria-describedby="emailHelp"
                                                                placeholder="Enter Name" required>
                                                        </div>
                                                        <div class="form-group mt-2">
                                                            <label for="email">Email address</label>
                                                            <input type="email" class="form-control" id="email"
                                                                name="Email" aria-describedby="emailHelp"
                                                                placeholder="Enter email" required>
                                                        </div>
                                                        <div id="error-message" class="text-danger"></div>
                                                        <div class="form-group mt-2">
                                                            <label for="category">Category</label>
                                                            <select class="form-control" id="categoryss" name="category"
                                                                aria-describedby="emailHelp" required>
                                                                <input type="hidden" id="categoryInput"
                                                                    name="categoryName">

                                                                <!-- Other options will be added dynamically using JavaScript -->
                                                            </select>
                                                        </div>


                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="submit" id="addLeadBtn" class="btn btn-info">Add
                                                            Lead</button>
                                                        <button type="button" class="btn btn-danger"
                                                            data-bs-dismiss="modal">Close</button>
                                                    </div>
                                                </form>

                                            </div>
                                        </div>
                                    </div>


                                    <!-- Table containers -->
                                    <!-- Table container for the merged table -->
                                    <div class="table-container" id="totalEmailsTableContainer">
                                        <table id="TotalEmaildata"
                                            class="table table-striped table-hover table-bordered">
                                            <!-- <h2>Total Emails</h2> -->
                                            <thead>
                                                <tr>
                                                    <th class="selectBox">Select</th>
                                                    <th>S.No</th>
                                                    <th>Name</th>
                                                    <th>Email</th>
                                                    <th>Category</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% let rowIndext=1; %>
                                                    <% totaldata.slice().reverse().forEach((companyemail)=> { %>
                                                        <!-- Reverse the companyemails array here -->
                                                        <tr data-row-index="<%= rowIndext %>">
                                                            <!-- Use the updated variable "rowIndex" instead of "index" to avoid conflicts -->
                                                            <td>
                                                                <input type="checkbox" id="checkbox-<%= rowIndext %>"
                                                                    class="checkbox-item"
                                                                    data-profile-id="<%= companyemail._id %>" />
                                                            </td>
                                                            <td>
                                                                <%= rowIndext %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.DomainName %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.Email %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.category %>
                                                            </td>
                                                        </tr>
                                                        <% rowIndext++; %>
                                                            <% }); %>
                                            </tbody>
                                        </table>
                                    </div>

                                    <div class="table-container" id="todayEmailsTableContainer">
                                        <!-- Today Emails Table -->


                                        <table id="TodayEmailsData"
                                            class="table table-striped table-hover table-bordered">
                                            <!-- <h2>Today Emails</h2> -->
                                            <thead>
                                                <tr>
                                                    <th class="selectBox">Select</th>
                                                    <th>S.No</th>
                                                    <th>Name</th>
                                                    <th>Email</th>
                                                    <th>Category</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% let rowIndextoday=1; %>
                                                    <% todayData.slice().reverse().forEach((companyemail)=> { %>

                                                        <tr data-row-index="<%= rowIndextoday %>">

                                                            <td>
                                                                <input type="checkbox"
                                                                    id="checkbox-<%= rowIndextoday %>"
                                                                    class="checkbox-item"
                                                                    data-profile-id="<%= companyemail._id %>" />
                                                            </td>
                                                            <td>
                                                                <%= rowIndextoday %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.DomainName %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.Email %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.category %>
                                                            </td>
                                                        </tr>
                                                        <% rowIndextoday++; %>
                                                            <% }); %>
                                            </tbody>
                                        </table>

                                    </div>

                                    <div class="table-container" id="weeklyEmailsTableContainer">
                                        <!-- Weekly Emails Table -->

                                        <table id="weeklyEmailsData"
                                            class="table table-striped table-hover table-bordered">
                                            <!-- <h2>Weekly Emails</h2> -->
                                            <thead>
                                                <tr>
                                                    <th class="selectBox">Select</th>
                                                    <th>S.No</th>
                                                    <th>Name</th>
                                                    <th>Email</th>
                                                    <th>Category</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% let rowIndexw=1; %>
                                                    <% weeklyData.slice().reverse().forEach((companyemail)=> { %>

                                                        <tr data-row-index="<%= rowIndexw %>">

                                                            <td>
                                                                <input type="checkbox" id="checkbox-<%= rowIndexw %>"
                                                                    class="checkbox-item"
                                                                    data-profile-id="<%= companyemail._id %>" />
                                                            </td>
                                                            <td>
                                                                <%= rowIndexw %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.DomainName %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.Email %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.category %>
                                                            </td>
                                                        </tr>
                                                        <% rowIndexw++; %>
                                                            <% }); %>
                                            </tbody>
                                        </table>
                                    </div>

                                    <div class="table-container" id="monthlyEmailsTableContainer">
                                        <!-- Monthly Emails Table -->
                                        <table id="MonthlyEmailsData"
                                            class="table table-striped table-hover table-bordered">
                                            <!-- <h2>Monthly Emails</h2> -->
                                            <thead>
                                                <tr>
                                                    <th class="selectBox">Select</th>
                                                    <th>S.No</th>
                                                    <th>Name</th>
                                                    <th>Email</th>
                                                    <th>Category</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% let rowIndexm=1; %>
                                                    <% monthlyData.slice().reverse().forEach((companyemail)=> { %>
                                                        <!-- Reverse the companyemails array here -->
                                                        <tr data-row-index="<%= rowIndexm %>">
                                                            <!-- Use the updated variable "rowIndex" instead of "index" to avoid conflicts -->
                                                            <td>
                                                                <input type="checkbox" id="checkbox-<%= rowIndexm %>"
                                                                    class="checkbox-item"
                                                                    data-profile-id="<%= companyemail._id %>" />
                                                            </td>
                                                            <td>
                                                                <%= rowIndexm %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.DomainName %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.Email %>
                                                            </td>
                                                            <td>
                                                                <%= companyemail.category %>
                                                            </td>
                                                        </tr>
                                                        <% rowIndexm++; %>
                                                            <% }); %>
                                            </tbody>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>



    <script src="plugins/common/common.min.js"></script>
    <script src="js/custom.min.js"></script>
    <script src="js/settings.js"></script>
    <script src="js/gleek.js"></script>
    <script src="js/styleSwitcher.js"></script>





    <!-- Model Open For Add lead -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.js"
        integrity="sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=" crossorigin="anonymous"></script>


    <!-- First, load jQuery and Moment.js -->
    <script src="https://code.jquery.com/jquery-3.7.0.js"
        integrity="sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>

    <!-- Next, load other scripts that depend on jQuery and Moment.js -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

    <!-- Finally, load the daterangepicker scripts -->
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>





    <!-- Show Data tabel  -->
    <script>
        $(document).ready(function () {
            $('#TotalEmaildata').DataTable({
                dom: 'Blfrtip',
                lengthMenu: [
                    [10, 25, 100, 250, -1],
                    ['10 rows', '25 rows', '100 rows', '250 rows', 'Show all']
                ],
                buttons: [
                    'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                responsive: true,
                columnDefs: [
                    { responsivePriority: 1, targets: 0 },
                    { responsivePriority: 2, targets: -1 }
                ]
            });
        });





        // $(document).ready(function () {
        //     $('#TodayEmailsData').DataTable({
        //         dom: 'Blfrtip',
        //         paging: true, // Enable pagination
        //         pageLength: 25, // Default page length
        //         lengthMenu: [[25, 50, 100, 200, -1], [25, 50, 100, 200, 'All']]
        //     });
        // });
        $(document).ready(function () {
            // jQuery('#myTable').DataTable();
            $('#TodayEmailsData').DataTable({
                dom: 'Blfrtip',
                lengthMenu: [
                    [10, 25, 100, 250, -1],
                    ['10 rows', '25 rows', '100 rows', '250 rows', 'Show all']
                ],
                buttons: [
                    'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                // paging: false,
                responsive: true,
                columnDefs: [
                    { responsivePriority: 1, targets: 0 },
                    { responsivePriority: 2, targets: -1 }
                ]


            });
        });

        // $(document).ready(function () {
        //     $('#weeklyEmailsData').DataTable({
        //         dom: 'Blfrtip',
        //         paging: true, // Enable pagination
        //         pageLength: 25, // Default page length
        //         lengthMenu: [[25, 50, 100, 200, -1], [25, 50, 100, 200, 'All']]
        //     });
        // });
        $(document).ready(function () {
            // jQuery('#myTable').DataTable();
            $('#weeklyEmailsData').DataTable({
                dom: 'Blfrtip',
                lengthMenu: [
                    [10, 25, 100, 250, -1],
                    ['10 rows', '25 rows', '100 rows', '250 rows', 'Show all']
                ],
                buttons: [
                    'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                // paging: false,
                responsive: true,
                columnDefs: [
                    { responsivePriority: 1, targets: 0 },
                    { responsivePriority: 2, targets: -1 }
                ]


            });
        });

        // $(document).ready(function () {
        //     $('#MonthlyEmailsData').DataTable({
        //         dom: 'Blfrtip',
        //         paging: true, // Enable pagination
        //         pageLength: 25, // Default page length
        //         lengthMenu: [[25, 50, 100, 200, -1], [25, 50, 100, 200, 'All']]
        //     });
        // });
        $(document).ready(function () {
            // jQuery('#myTable').DataTable();
            $('#MonthlyEmailsData').DataTable({
                dom: 'Blfrtip',
                lengthMenu: [
                    [10, 25, 100, 250, -1],
                    ['10 rows', '25 rows', '100 rows', '250 rows', 'Show all']
                ],
                buttons: [
                    'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                // paging: false,
                responsive: true,
                columnDefs: [
                    { responsivePriority: 1, targets: 0 },
                    { responsivePriority: 2, targets: -1 }
                ]


            });
        });


    </script>







    <!-- Show Today Date -->
    <script>
        // Function to update the date in the HTML element
        function updateDate() {
            const currentDate = new Date();
            const datePlaceholder = document.getElementById("datePlaceholder");

            // Format the date as desired (e.g., "Sep 6, 2023")
            const formattedDate = currentDate.toLocaleDateString("en-US", { month: "short", day: "numeric", year: "numeric" });

            // Update the HTML element's content with the current date
            datePlaceholder.textContent = formattedDate;
        }

        // Call the updateDate function to update the date initially
        updateDate();
    </script>


    <!-- Show Weekly date -->
    <script>
        // Function to update the weekly date range in the HTML element
        function updateWeeklyDateRange() {
            const currentDate = new Date();
            const startOfWeek = new Date(currentDate);
            startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1); // Set to the start of the week (Monday)

            const endOfWeek = new Date(currentDate);
            endOfWeek.setDate(startOfWeek.getDate() + 6); // Set to the end of the week (Sunday)

            // Format the start and end of the week as desired (e.g., "[4-10 Sep]")
            const formattedStartDate = startOfWeek.getDate();
            const formattedEndDate = endOfWeek.getDate();
            const monthName = startOfWeek.toLocaleDateString("en-US", { month: "short" });

            const weekDateRange = `[${formattedStartDate}-${formattedEndDate} ${monthName}]`;

            // Update the HTML element's content with the weekly date range
            document.getElementById("weekdatashow").textContent = weekDateRange;
        }

        // Call the updateWeeklyDateRange function to update the date range initially
        updateWeeklyDateRange();
    </script>


    <!-- Show current Month -->
    <script>
        // Function to update the current month in the HTML element
        function updateCurrentMonth() {
            const currentDate = new Date();
            const monthName = currentDate.toLocaleDateString("en-US", { month: "long" });

            // Update the HTML element's content with the current month
            document.getElementById("currentmonth").textContent = monthName;
        }

        // Call the updateCurrentMonth function to update the current month initially
        updateCurrentMonth();
    </script>


    <!-- Show All table hide and unhide -->
    <script>
        // Function to hide all table containers
        function hideAllTables() {
            const tableContainers = document.querySelectorAll(".table-container");
            tableContainers.forEach((container) => {
                container.style.display = "none";
            });
        }

        // Add event listeners to the card elements
        document.getElementById("totalEmailsCard").addEventListener("click", () => {
            hideAllTables();
            document.getElementById("totalEmailsTableContainer").style.display = "block";
        });

        document.getElementById("todayEmailsCard").addEventListener("click", () => {
            hideAllTables();
            document.getElementById("todayEmailsTableContainer").style.display = "block";
        });

        document.getElementById("weeklyEmailsCard").addEventListener("click", () => {
            hideAllTables();
            document.getElementById("weeklyEmailsTableContainer").style.display = "block";
        });

        document.getElementById("monthlyEmailsCard").addEventListener("click", () => {
            hideAllTables();
            document.getElementById("monthlyEmailsTableContainer").style.display = "block";
        });

        // Initially hide all tables except Total Emails
        hideAllTables();
        document.getElementById("totalEmailsTableContainer").style.display = "block";

    </script>



    <!-- Filter by Date -->
    <script>
        var formattedStartDate;
        var formattedEndDate;

        $(function () {
            $('input[name="daterange"]').daterangepicker({
                opens: 'left',
                locale: {
                    format: 'DD-MM-YYYY' // Set the desired format here
                }
            }, function (start, end, label) {
                // Format the selected date range as "YYYY-MM-DD"
                formattedStartDate = start.format('YYYY-MM-DD');
                formattedEndDate = end.format('YYYY-MM-DD');
                console.log("A new date selection was made: " + formattedStartDate + ' to ' + formattedEndDate);
            });
        });

        const filterButton = document.getElementById('filter-btn');
        filterButton.addEventListener('click', handleFilterButtonClick);

        async function handleFilterButtonClick() {
            console.log("A new date selection was made: ");
            console.log("A new date selection was made: ");
            console.log("Ahello: " + formattedStartDate + ' to ' + formattedEndDate);

            // Get the selected start and end dates from the input fields
            const startDate = formattedStartDate
            const endDate = formattedEndDate


            try {

                let getdatafromlocalstorage = localStorage.getItem("amitfilterbyday")
                console.log("local", getdatafromlocalstorage)

                if (getdatafromlocalstorage === "amitcategorydata") {
                    // Make a GET request to fetch the filtered data from the server
                    const response = await fetch(`/filterdateandcategory?selectedCategory=${selectedCategoryValues}&startDate=${startDate}&endDate=${endDate}`);


                    const data = await response.json();

                    // Clear the existing table rows
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = '';

                    // Iterate through the filtered data and create new rows in the table
                    let index = 0;
                    data.forEach(profile => {
                        const newRow = `
          <tr>
            <td>
              <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${profile._id}" />
            </td>
            <td>${index + 1}</td>
            <td>${profile.DomainName}</td>
            <td>${profile.Email}</td>
            <td>${profile.category}</td>
          </tr>
        `;
                        tableBody.insertAdjacentHTML('beforeend', newRow);
                        index++;

                    });

                } else {

                    // Make a GET request to fetch the filtered data from the server
                    const response = await fetch(`/filterDatabydate?startDate=${startDate}&endDate=${endDate}`);
                    localStorage.setItem("amitfilterbyday", "amitdatedata")

                    console.log("in funct")

                    const data = await response.json();

                    // Clear the existing table rows
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = '';

                    // Iterate through the filtered data and create new rows in the table
                    let index = 0;
                    data.forEach(profile => {
                        const newRow = `
          <tr>
            <td>
              <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${profile._id}" />
            </td>
            <td>${index + 1}</td>
            <td>${profile.DomainName}</td>
            <td>${profile.Email}</td>
            <td>${profile.category}</td>
          </tr>
        `;
                        tableBody.insertAdjacentHTML('beforeend', newRow);
                        index++;

                    });
                }
            } catch (error) {
                console.error('Error occurred:', error);
            }
        }

    </script>



    <!-- Filter by Day -->
    <script>
        const applyDateFilterBtn = document.getElementById('apply-date-filter-btn');

        // Function to handle apply date filter button click event
        applyDateFilterBtn.addEventListener('click', async () => {

            const selectedDate = document.getElementById('selected-date').value;
            console.log(selectedDate)

            try {

                // const dropdown = document.getElementById('categoryDropdown');
                // const selectedOption = dropdown.options[dropdown.selectedIndex];
                // const selectedCategory = selectedOption.innerHTML;

                // console.log("Hello" , selectedCategoryValues)
                let getdatafromlocalstorage = localStorage.getItem("amitfilterbyday")
                console.log("local", getdatafromlocalstorage)

                if (getdatafromlocalstorage === "amitcategorydata") {
                    console.log("if in day")
                    const response = await fetch(`api/filterDataboth?selectedCategory=${selectedCategoryValues}&selectedDate=${selectedDate}`);
                    const filteredData = await response.json();

                    // Display the filtered data in the table (modify the table rows accordingly)
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = ''; // Clear existing table rows

                    // Loop through the filtered data and create new table rows
                    filteredData.forEach((data, index) => {
                        const newRow = `
            <tr>
              <td>
                <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${data._id}" />
              </td>
              <td>${index + 1}</td>
              <td>${data.DomainName}</td>
              <td>${data.Email}</td>
              <td>${data.category}</td>
            </tr>
          `;
                        tableBody.innerHTML += newRow;
                    });

                } else {
                    console.log("else in day")
                    // Make a GET request to the filterData route with the selected date
                    const response = await fetch(`/filterDatabyday?selectedDate=${selectedDate}`);
                    localStorage.setItem("amitfilterbyday", "amitdaydata")
                    const filteredData = await response.json();

                    // Display the filtered data in the table (modify the table rows accordingly)
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = ''; // Clear existing table rows

                    // Loop through the filtered data and create new table rows
                    filteredData.forEach((data, index) => {
                        const newRow = `
            <tr>
              <td>
                <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${data._id}" />
              </td>
              <td>${index + 1}</td>
              <td>${data.DomainName}</td>
              <td>${data.Email}</td>
              <td>${data.category}</td>
            </tr>
          `;
                        tableBody.innerHTML += newRow;
                    });
                }
            } catch (error) {
                console.error('Error occurred:', error);
                // Show an error message using a toast notification library (optional)
                // showToastNotification('An unexpected error occurred. Please try again later.', 'error');
            }
        });
    </script>



    <!-- Add Category -->
    <script>
        function addLoadCategory() {
            const newCategoryName = prompt("Enter the name of the new category:");
            if (newCategoryName) {
                const newCategory = { category: newCategoryName };

                fetch('/api/categories', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newCategory)
                })
                    .then((response) => {
                        if (response.ok) {
                            alert('New category added successfully!');

                        } else {
                            console.log("error in add")
                        }
                    })
                    .catch((error) => {
                        console.error('Error adding category:', error);
                        alert('An error occurred while adding the category. Please try again.');
                    });
            }
        }

        // Attach click event listener to the "Add Category" button
        document.getElementById('addCategoryBtn').addEventListener('click', addLoadCategory);
    </script>





    <!-- For Add Lead -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Clear a specific key from localStorage
            localStorage.removeItem('amitfilterbyday');

            const categoryDropdown = document.getElementById('categoryss');
            const selectedCategoryDisplay = document.getElementById('selectedCategoryDisplay');
            const categoryInput = document.getElementById('categoryInput'); // Hidden input field

            // Fetch categories from the API when the modal is opened
            const addLeadModal = new bootstrap.Modal(document.getElementById('addLeadModal'));
            addLeadModal._element.addEventListener('show.bs.modal', async () => {
                try {
                    const response = await fetch('/api/categories');
                    const categories = await response.json();

                    // Clear existing options
                    categoryDropdown.innerHTML = '';

                    // Create a default option
                    const defaultOption = document.createElement('option');
                    defaultOption.value = ""; // Set the value as needed
                    defaultOption.textContent = "Select Category"; // Set the text for the default option
                    defaultOption.disabled = true; // Disable the default option
                    defaultOption.selected = true; // Make the default option selected by default

                    // Append the default option to the dropdown
                    categoryDropdown.appendChild(defaultOption);

                    // Populate the category dropdown with options
                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category._id;
                        option.textContent = category.category; // Use the appropriate field from your API response
                        categoryDropdown.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error fetching categories:', error);
                }
            });

            var selectedCategoryName;

            // Listen for changes in the dropdown selection
            categoryDropdown.addEventListener('change', () => {
                const selectedOption = categoryDropdown.options[categoryDropdown.selectedIndex];
                selectedCategoryName = selectedOption.textContent;
                console.log(selectedCategoryName)

            });


            const addLeadForm = document.getElementById('addLeadForm');
            const addLeadBtn = document.getElementById('addLeadBtn');

            addLeadForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                console.log(selectedCategoryName);
                if (!addLeadForm.checkValidity()) {
                    // Prevent form submission if fields are not valid
                    event.stopPropagation();
                    addLeadForm.classList.add('was-validated');
                    return;
                }

                // Get form data
                const domainName = document.getElementById('name').value;
                const email = document.getElementById('email').value;

                // Save data for domains other than linkedin.com
                try {
                    const response = await fetch('/api/save-emails', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ DomainName: domainName, Email: email, category: selectedCategoryName }),
                    });

                    if (response.ok) {
                        console.log('Email saved successfully to the database!');
                        addLeadModal.hide(); // Close the modal
                        addLeadForm.reset(); // Reset the form
                    } else {
                        const errorResponse = await response.json();

                        if (errorResponse.message === 'Duplicate email') {
                            const errorMessageElement = document.getElementById('error-message');
                            errorMessageElement.innerText = 'Duplicate email'; // Display the error message
                        } else {
                            console.error('Failed to save email to the database.');
                        }
                        setTimeout(() => {
                            window.location.href = '/dashboard'; // Replace with your desired URL
                        }, 1000);

                    }
                } catch (error) {


                    console.error('Error saving email:', error);
                }
            });

            // Clear validation classes when the modal is closed
            addLeadModal._element.addEventListener('hidden.bs.modal', () => {
                addLeadForm.classList.remove('was-validated');
            });
        });
    </script>




    <!-- For logout -->
    <script>
        // Function to handle logout
        async function handleLogout() {
            try {
                // Make a GET request to the logout route on the server
                const response = await fetch('/logout', {
                    method: 'GET',
                });
                if (response.ok) {
                    // Remove the cookie from the client-side
                    document.cookie = 'accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';

                    // Redirect to the homepage after successful logout
                    window.location.href = '/';
                } else {
                    console.error('Logout failed:', response.status, response.statusText);
                    // Show an error message using a toast notification library (optional)
                    // showToastNotification('Logout failed. Please try again later.', 'error');
                }
            } catch (error) {
                console.error('Logout failed:', error);
                // Show an error message using a toast notification library (optional)
                // showToastNotification('An unexpected error occurred. Please try again later.', 'error');
            }
        }

        // Attach the handleLogout function to the logout button click event
        const logoutButton = document.getElementById('logoutBtn');
        // logoutButton.addEventListener('click', handleLogout);
    </script>




    <!-- For Making table ready for export -->
    <script>
        function convertToCSV(table) {
            const rows = table.querySelectorAll('tr');

            const csvData = [];

            for (const row of rows) {
                const rowData = [];
                const cells = row.querySelectorAll('th , td');
                for (let i = 2; i < cells.length; i++) {
                    rowData.push(cells[i].innerText);
                }
                csvData.push(rowData.join(','));
            }

            return csvData.join('\n');
        }


    </script>



    <!-- Export the CSV File -->
    <script>
        const exportCSVButton = document.getElementById('export-csv-btn');
        exportCSVButton.addEventListener('click', () => {
            // Get the table element
            const table = document.querySelector('table');

            // Convert the table data to CSV format
            const csvData = convertToCSV(table);

            // Create a Blob with the CSV data
            const blob = new Blob([csvData], { type: 'text/csv' });

            // Create a URL for the Blob
            const url = URL.createObjectURL(blob);

            // Create an anchor element to trigger the download
            const a = document.createElement('a');
            a.href = url;
            a.download = 'table_data.csv';

            // Trigger the download
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            // Clean up the URL object
            URL.revokeObjectURL(url);
        });


    </script>




    <!-- Show Category Drop Down & Filter by Category-->
    <script>

        const selectedCategoryValues = [];
        async function categoryArray() {
            var categoriesArray;


            const categoryInput = document.getElementById("category-input");
            const dropdownContent = document.getElementById("dropdown-content");
            const selectedCategories = document.getElementById("selected-categories");

            // Define your array of categories
            categoriesArray = [];
            categoryInput.readOnly = true;

            async function fetchData() {
                await fetch('/api/categories') // Replace with your API endpoint
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Store the fetched data in the array

                        categoriesArray = data.map(item => item.category);
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });
            }

            // Call the fetchData function to fetch API data
            await fetchData();

            console.log(categoriesArray)

            // Populate the dropdown with options from the array
            await categoriesArray.forEach(category => {
                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.value = category.toLowerCase();
                checkbox.id = category.toLowerCase();

                const label = document.createElement("label");
                label.htmlFor = category.toLowerCase();
                label.appendChild(document.createTextNode(category));

                const categoryDiv = document.createElement("div");
                categoryDiv.classList.add("category-item");
                categoryDiv.appendChild(label);
                categoryDiv.appendChild(checkbox);

                dropdownContent.appendChild(categoryDiv);
            });

            categoryInput.addEventListener("click", function () {
                dropdownContent.classList.toggle("show");
            });


            // Handle checkbox selection
            dropdownContent.addEventListener("click", function (event) {
                if (event.target.type === "checkbox") {
                    const checkbox = event.target;
                    const label = checkbox.parentElement;
                    const categoryName = label.textContent.trim();

                    if (checkbox.checked) {
                        // If the checkbox is checked, add the category to the selected categories
                        const selectedCategory = document.createElement("div");

                        // Create a span for the remove icon (X)
                        const removeIcon = document.createElement("span");
                        removeIcon.textContent = 'X';
                        removeIcon.classList.add('remove-icon');
                        removeIcon.addEventListener("click", function () {
                            // Remove the selected category and update the input field
                            selectedCategoryValues.splice(selectedCategoryValues.indexOf(categoryName), 1);
                            selectedCategories.removeChild(selectedCategory);
                            categoryInput.value = selectedCategoryValues.join(", ");
                        });

                        selectedCategory.textContent = categoryName;
                        selectedCategory.appendChild(removeIcon); // Add the remove icon to the selected category

                        selectedCategoryValues.push(categoryName);
                        selectedCategories.appendChild(selectedCategory);

                        // console.log(selectedCategoryValues)
                        // Update the visible input field when a category is selected
                        categoryInput.value = selectedCategoryValues.join(", "); // You can use a different separator if needed
                    } else {
                        // If the checkbox is unchecked, remove the category from the selected categories
                        const index = selectedCategoryValues.indexOf(categoryName);
                        if (index !== -1) {
                            selectedCategoryValues.splice(index, 1);
                        }
                        const categories = selectedCategories.querySelectorAll("div");
                        categories.forEach(category => {
                            if (category.textContent === categoryName) {
                                selectedCategories.removeChild(category);
                            }
                        });

                        // Update the visible input field when a category is deselected
                        categoryInput.value = selectedCategoryValues.join(", "); // You can use a different separator if needed
                    }
                }
            });

            // ...




















            // Close the dropdown when the user clicks outside of it
            window.addEventListener("click", function (event) {
                if (!event.target.matches("#category-input")) {
                    const dropdowns = document.getElementsByClassName("dropdown-content");
                    for (let i = 0; i < dropdowns.length; i++) {
                        const openDropdown = dropdowns[i];
                        if (openDropdown.classList.contains("show")) {
                            openDropdown.classList.remove("show");
                        }
                    }
                }
            });

        }
        categoryArray()


        async function filterByCategory() {
            try {


                // console.log(selectedCategoryValues)
                let getdatafromlocalstorage = localStorage.getItem("amitfilterbyday")
                console.log("local", getdatafromlocalstorage)

                const startDate = formattedStartDate
                const endDate = formattedEndDate


                if (getdatafromlocalstorage === "amitdaydata") {
                    console.log("inner if")
                    const response = await fetch(`api/filterDataboth?selectedCategory=${selectedCategoryValues}&selectedDate=${selectedDate}`);
                    const filteredData = await response.json();

                    // Display the filtered data in the table (modify the table rows accordingly)
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = ''; // Clear existing table rows

                    // Loop through the filtered data and create new table rows
                    filteredData.forEach((data, index) => {
                        const newRow = `
      <tr>
        <td>
          <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${data._id}" />
        </td>
        <td>${index + 1}</td>
        <td>${data.DomainName}</td>
        <td>${data.Email}</td>
        <td>${data.category}</td>
      </tr>
    `;
                        tableBody.innerHTML += newRow;
                    });
                    updateSelectedCount()




                } else if (getdatafromlocalstorage === "amitdatedata") {



                    const response = await fetch(`filterdateandcategory?selectedCategory=${selectedCategoryValues}&startDate=${startDate}&endDate=${endDate}`);
                    const filteredData = await response.json();

                    // Display the filtered data in the table (modify the table rows accordingly)
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = ''; // Clear existing table rows

                    // Loop through the filtered data and create new table rows
                    filteredData.forEach((data, index) => {
                        const newRow = `
      <tr>
        <td>
          <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${data._id}" />
        </td>
        <td>${index + 1}</td>
        <td>${data.DomainName}</td>
        <td>${data.Email}</td>
        <td>${data.category}</td>
      </tr>
    `;
                        tableBody.innerHTML += newRow;
                    });
                    updateSelectedCount()


                } else {

                    // Make a GET request to the filterData route with the selected category
                    const response = await fetch(`/api/filterDatabyCategory?selectedCategory=${selectedCategoryValues}`);
                    localStorage.setItem("amitfilterbyday", "amitcategorydata")

                    const filteredData = await response.json();

                    // Display the filtered data in the table (modify the table rows accordingly)
                    const tableBody = document.querySelector('tbody');
                    tableBody.innerHTML = ''; // Clear existing table rows

                    // Loop through the filtered data and create new table rows
                    filteredData.forEach((data, index) => {
                        const newRow = `
      <tr>
        <td>
          <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${data._id}" />
        </td>
        <td>${index + 1}</td>
        <td>${data.DomainName}</td>
        <td>${data.Email}</td>
        <td>${data.category}</td>
      </tr>
    `;
                        tableBody.innerHTML += newRow;
                    });
                    updateSelectedCount()
                }
            } catch (error) {
                console.error('Error occurred:', error);
                // Show an error message using a toast notification library (optional)
                // showToastNotification('An unexpected error occurred. Please try again later.', 'error');
            }

        }

        // Function to handle the "Filter Category" button click event
        const filterByCategoryBtn = document.getElementById('findbyCategory');
        filterByCategoryBtn.addEventListener('click', filterByCategory);









        // For Delete Category
        async function deleteSelectedItem() {
            console.log(selectedCategoryValues)

            // Show confirmation message
            if (confirm(`Are you sure you want to delete the   ""${selectedCategoryValues}""   category?`)) {
                // Make the API call to delete the category
                fetch(`/api/categories?selectedCategory=${selectedCategoryValues}`, {
                    method: 'DELETE',
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            console.log("Category " + selectedCategoryValues + " deleted!");
                            // You can perform additional actions here if needed after successful deletion.
                        } else {
                            console.error("Failed to delete category: " + data.message);
                        }
                    })
                    .catch((error) => {
                        console.error("Error while deleting category:", error);
                    });
            }
        }

    </script>




















    <!--Total emails select All button and delete button handle -->
    <script>
        // Select Box Count Start
        function updateSelectedCount() {
            const checkboxes = document.getElementsByClassName('checkbox-item');

            const selectedCount = document.getElementById('selectedCount');
            let count = 0;

            for (let i = 0; i < checkboxes.length; i++) {

                if (checkboxes[i].checked) {
                    count++;
                }

            }

            selectedCount.textContent = count;
        }

        // Event listener to handle checkbox selection
        const checkboxess = document.getElementsByClassName('checkbox-item');
        for (let i = 0; i < checkboxess.length; i++) {
            checkboxess[i].addEventListener('change', () => {
                updateSelectedCount();
            });
        }

        // Update the count of selected rows on page load
        window.addEventListener('DOMContentLoaded', () => {
            updateSelectedCount();
        });
        // Select Box Count End 
        const checkboxes = document.querySelectorAll('.checkbox-item');
        // Get the delete button
        const deleteButton = document.getElementById('delete-btn');


        // Handle Select All 

        $("#select-all-btn").click(function () {
            const $container = $("#totalEmailsTableContainer");
            const $containerToday = $("#todayEmailsTableContainer");
            const $containerWeek = $("#weeklyEmailsTableContainer");
            const $containerMonth = $("#monthlyEmailsTableContainer");

            // Check if the container is displayed (has display: block)
            if ($container.is(":visible")) {
                // Check if all checkboxes are checked
                const allChecked = $container.find(".checkbox-item:checked").length === $container.find(".checkbox-item").length;

                // Toggle the state of checkboxes
                $container.find("tr:visible").each(function () {
                    const $checkbox = $(this).find(".checkbox-item");
                    $checkbox.prop("checked", !allChecked); // Toggle the state
                });

                // Count the selected checkboxes
                const selectedCheckboxes = $container.find(".checkbox-item:checked").length;

            } else if ($containerToday.is(":visible")) {
                // Check if all checkboxes are checked
                const allChecked = $containerToday.find(".checkbox-item:checked").length === $containerToday.find(".checkbox-item").length;

                // Toggle the state of checkboxes
                $containerToday.find("tr:visible").each(function () {
                    const $checkbox = $(this).find(".checkbox-item");
                    $checkbox.prop("checked", !allChecked); // Toggle the state
                });

                // Count the selected checkboxes
                const selectedCheckboxes = $containerToday.find(".checkbox-item:checked").length;

            } else if ($containerWeek.is(":visible")) {
                // Check if all checkboxes are checked
                const allChecked = $containerWeek.find(".checkbox-item:checked").length === $containerWeek.find(".checkbox-item").length;

                // Toggle the state of checkboxes
                $containerWeek.find("tr:visible").each(function () {
                    const $checkbox = $(this).find(".checkbox-item");
                    $checkbox.prop("checked", !allChecked); // Toggle the state
                });

                // Count the selected checkboxes
                const selectedCheckboxes = $containerWeek.find(".checkbox-item:checked").length;

            }
            else if ($containerMonth.is(":visible")) {
                // Check if all checkboxes are checked
                const allChecked = $containerMonth.find(".checkbox-item:checked").length === $containerMonth.find(".checkbox-item").length;

                // Toggle the state of checkboxes
                $containerMonth.find("tr:visible").each(function () {
                    const $checkbox = $(this).find(".checkbox-item");
                    $checkbox.prop("checked", !allChecked); // Toggle the state
                });

                // Count the selected checkboxes
                const selectedCheckboxes = $containerMonth.find(".checkbox-item:checked").length;

            }
            updateSelectedCount();
        });





        // Function to handle checkbox change event
        function handleCheckboxChange() {
            // Check if any checkboxes are checked
            const anyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);


        }

        // Attach the handleCheckboxChange function to each checkbox
        checkboxes.forEach(checkbox => checkbox.addEventListener('change', handleCheckboxChange));

        async function handleDeleteButtonClick() {
            // Get all checked checkboxes
            const checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);

            // Check if any checkboxes are checked
            if (checkedCheckboxes.length === 0) {
                // If no checkboxes are checked, show a message to the user
                alert('Please select at least one row to delete.');
                return;
            }

            // Show the confirm popup
            const confirmed = window.confirm('Are you sure you want to delete the selected rows?');

            // If the user confirms, proceed with the deletion
            if (confirmed) {
                // Delete the selected rows from the database using the API
                for (const checkbox of checkedCheckboxes) {
                    const id = checkbox.getAttribute('data-profile-id'); // Get the profile ID from the data attribute
                    try {
                        // Make a DELETE request to the API endpoint
                        const response = await fetch(`/domainEmail/${id}`, {
                            method: 'DELETE',
                        });
                        if (response.ok) {
                            checkbox.closest('tr').remove();
                        } else {
                            console.error('Error occurred:', response.status, response.statusText);
                            // Show an error message using a toast notification library
                            showToastNotification('Deletion failed. Please try again later.', 'error');
                        }
                    } catch (error) {
                        console.error('Error occurred:', error);
                        // Show an error message using a toast notification library
                        showToastNotification('An unexpected error occurred. Please try again later.', 'error');
                    }
                }

            }
        }


        deleteButton.addEventListener('click', handleDeleteButtonClick);

        // Function to show a toast notification (you can use any toast library)
        function showToastNotification(message, type) {
            alert(`${type.toUpperCase()}: ${message}`);
        }


    </script>









    <script>








    </script>



    </body>

    </html>